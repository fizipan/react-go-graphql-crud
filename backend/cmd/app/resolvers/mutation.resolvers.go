package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	model "backend/cmd/app/domain"
	model1 "backend/cmd/app/domain/dao"
	"backend/config"
	"backend/graph"
	"context"
	"fmt"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.NewLogin) (*model1.Auth, error) {
	auth, err := r.DB.Login(&input)
	if err != nil {
		return nil, err
	}
	return auth, nil
}

// CreateUser adalah resolver untuk field createUser
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model1.User, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	user, err := r.DB.CreateUser(&input)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.NewUser) (*model1.User, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	user, err := r.DB.UpdateUser(id, &input)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model1.User, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	user, err := r.DB.DeleteUser(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model1.Product, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	product, err := r.DB.CreateProduct(&input)
	if err != nil {
		return nil, err
	}
	return product, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.NewProduct) (*model1.Product, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	product, err := r.DB.UpdateProduct(id, &input)
	if err != nil {
		return nil, err
	}
	return product, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*model1.Product, error) {
	auth := config.ForContext(ctx)
	if auth == nil {
		return nil, fmt.Errorf("access denied")
	}

	product, err := r.DB.DeleteProduct(id)
	if err != nil {
		return nil, err
	}
	return product, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
